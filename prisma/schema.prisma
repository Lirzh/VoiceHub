generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  username             String                @unique
  name                 String?
  grade                String?
  class                String?
  role                 String                @default("USER") // 简化为字符串字段
  password             String
  lastLogin            DateTime?
  lastLoginIp          String?
  passwordChangedAt    DateTime?
  forcePasswordChange  Boolean               @default(true) // 强制修改密码标志，新用户默认需要修改
  notifications        Notification[]
  notificationSettings NotificationSettings?
  songs                Song[]
  votes                Vote[]
}

// 简化的角色模型
model Role {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique // 角色名称，如"USER", "ADMIN", "SONG_ADMIN"
  displayName String   // 显示名称，如"普通用户", "管理员", "歌曲管理员"
  description String?  // 角色描述
  permissions String[] // 权限数组，如["song.manage", "user.view"]
  isSystem    Boolean  @default(false) // 是否为系统角色（不可删除）
}

model Song {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  title         String
  artist        String
  requesterId   Int
  played        Boolean        @default(false)
  playedAt      DateTime?
  semester      String?
  preferredPlayTimeId Int?     // 期望播出时段ID，可选
  cover         String?        // 歌曲封面URL
  musicPlatform String?        // 音乐平台（netease, tencent等）
  musicId       String?        // 平台上的歌曲ID
  notifications Notification[]
  schedules     Schedule[]
  requester     User           @relation(fields: [requesterId], references: [id])
  votes         Vote[]
  preferredPlayTime PlayTime?  @relation(fields: [preferredPlayTimeId], references: [id])
}

model Vote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  songId    Int
  userId    Int
  song      Song     @relation(fields: [songId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([songId, userId])
}

model Schedule {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songId    Int
  playDate  DateTime
  played    Boolean  @default(false)
  sequence  Int      @default(1)
  playTimeId Int?    // 播出时段ID，可选
  song      Song     @relation(fields: [songId], references: [id])
  playTime  PlayTime? @relation(fields: [playTimeId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  message   String
  read      Boolean  @default(false)
  userId    Int
  songId    Int?
  song      Song?    @relation(fields: [songId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model NotificationSettings {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             Int      @unique
  enabled            Boolean  @default(true)
  songRequestEnabled Boolean  @default(true)
  songVotedEnabled   Boolean  @default(true)
  songPlayedEnabled  Boolean  @default(true)
  refreshInterval    Int      @default(60)
  songVotedThreshold Int      @default(1)
  user               User     @relation(fields: [userId], references: [id])
}

// 播出时段模型
model PlayTime {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String    // 时段名称，如"上午"、"下午"
  startTime   String?   // 开始时间，格式为"HH:MM"，如"08:00"，可选
  endTime     String?   // 结束时间，格式为"HH:MM"，如"12:00"，可选
  enabled     Boolean   @default(true) // 是否启用
  description String?   // 描述，可选
  schedules   Schedule[]
  songs       Song[]    // 歌曲与播出时段的关联，表示期望的播出时段
}

// 学期管理模型
model Semester {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique // 学期名称，如"2024-2025学年上学期"
  isActive    Boolean  @default(false) // 是否为当前活跃学期
}

// 全局系统设置模型
model SystemSettings {
  id                      Int      @id @default(autoincrement())
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  enablePlayTimeSelection Boolean  @default(false) // 是否启用播出时段选择功能

  // 站点配置
  siteTitle              String?  // 站点标题
  siteLogoUrl            String?  // 站点Logo URL
  schoolLogoHomeUrl      String?  // 首页学校Logo URL（大尺寸）
  schoolLogoPrintUrl     String?  // 打印页学校Logo URL（小尺寸）
  siteDescription        String?  // 站点描述
  submissionGuidelines   String?  // 投稿须知
  icpNumber              String?  // 备案号
}

// 歌曲黑名单模型
model SongBlacklist {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        BlacklistType // 黑名单类型：SONG（具体歌曲）或KEYWORD（关键词）
  value       String   // 黑名单值：歌曲名+艺术家 或 关键词
  reason      String?  // 加入黑名单的原因
  isActive    Boolean  @default(true) // 是否启用
  createdBy   Int?     // 创建者ID
}

enum BlacklistType {
  SONG     // 具体歌曲
  KEYWORD  // 关键词
}
