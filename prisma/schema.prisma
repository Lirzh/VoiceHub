// 这是Prisma数据库模型定义文件

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  username         String   @unique  // 用户登录账号
  name             String?  // 用户姓名
  grade            String?  // 年级，如"高一"、"高二"
  class            String?  // 班级，如"1班"、"2班"
  role             Role     @default(USER)
  password         String
  passwordChangedAt DateTime? // 密码修改时间，用于使旧令牌失效
  lastLoginAt      DateTime? // 最后登录时间
  lastLoginIp      String?   // 最后登录IP
  votes            Vote[]
  songs            Song[]
  notifications    Notification[] // 用户的通知
  notificationSettings NotificationSettings? // 用户的通知设置
}

enum Role {
  USER
  ADMIN
}

// 歌曲表
model Song {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  artist      String
  requesterId Int
  requester   User     @relation(fields: [requesterId], references: [id])
  played      Boolean  @default(false)
  playedAt    DateTime?
  semester    String?  // 当前学期标识
  votes       Vote[]
  schedules   Schedule[]
}

// 投票表
model Vote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  songId    Int
  song      Song     @relation(fields: [songId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  @@unique([songId, userId]) // 确保一个用户只能对一首歌投一次票
}

// 排期表
model Schedule {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songId    Int
  song      Song     @relation(fields: [songId], references: [id])
  playDate  DateTime
  played    Boolean  @default(false)
  sequence  Int      @default(1) // 播放顺序
} 

// 通知表
model Notification {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  userId      Int       // 接收通知的用户ID
  user        User      @relation(fields: [userId], references: [id])
  type        NotificationType // 通知类型
  title       String    // 通知标题
  content     String    // 通知内容
  relatedId   Int?      // 相关联的ID（如歌曲ID、投票ID等）
  read        Boolean   @default(false) // 是否已读
  readAt      DateTime? // 阅读时间
}

// 通知类型枚举
enum NotificationType {
  SONG_SELECTED     // 歌曲被选中安排播放
  SONG_PLAYED       // 歌曲已播放
  SONG_VOTED        // 歌曲获得投票
  SYSTEM_NOTICE     // 系统通知
}

// 用户通知设置表
model NotificationSettings {
  id                Int     @id @default(autoincrement())
  userId            Int     @unique // 用户ID
  user              User    @relation(fields: [userId], references: [id])
  songSelectedNotify Boolean @default(true) // 歌曲被选中通知
  songPlayedNotify  Boolean @default(true) // 歌曲已播放通知
  songVotedNotify   Boolean @default(true) // 歌曲获得投票通知
  songVotedThreshold Int     @default(1)   // 歌曲获得多少票时通知，默认为1票
  systemNotify      Boolean @default(true) // 系统通知
  refreshInterval   Int     @default(60)   // 通知刷新间隔（秒），默认60秒
} 