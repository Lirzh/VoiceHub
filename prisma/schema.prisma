generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  username             String                @unique
  name                 String?
  grade                String?
  class                String?
  role                 Role                  @default(USER)
  password             String
  lastLoginAt          DateTime?
  lastLoginIp          String?
  passwordChangedAt    DateTime?
  notifications        Notification[]
  notificationSettings NotificationSettings?
  songs                Song[]
  votes                Vote[]
}

model Song {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  title         String
  artist        String
  requesterId   Int
  played        Boolean        @default(false)
  playedAt      DateTime?
  semester      String?
  notifications Notification[]
  schedules     Schedule[]
  requester     User           @relation(fields: [requesterId], references: [id])
  votes         Vote[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  songId    Int
  userId    Int
  song      Song     @relation(fields: [songId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([songId, userId])
}

model Schedule {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songId    Int
  playDate  DateTime
  played    Boolean  @default(false)
  sequence  Int      @default(1)
  song      Song     @relation(fields: [songId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  message   String
  read      Boolean  @default(false)
  userId    Int
  songId    Int?
  song      Song?    @relation(fields: [songId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model NotificationSettings {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             Int      @unique
  enabled            Boolean  @default(true)
  songRequestEnabled Boolean  @default(true)
  songVotedEnabled   Boolean  @default(true)
  songPlayedEnabled  Boolean  @default(true)
  refreshInterval    Int      @default(60)
  songVotedThreshold Int      @default(1)
  user               User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}
